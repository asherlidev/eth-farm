/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RealFarm, RealFarmInterface } from "../RealFarm";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_daiToken",
        type: "address",
      },
      {
        internalType: "contract RealToken",
        name: "_realToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "YieldWithdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateYieldTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "daiToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "daiTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isStaking",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "realToken",
    outputs: [
      {
        internalType: "contract RealToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "realTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200164d3803806200164d8339818101604052810190620000379190620000ef565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001c0565b600081519050620000d2816200018c565b92915050565b600081519050620000e981620001a6565b92915050565b600080604083850312156200010357600080fd5b60006200011385828601620000c1565b92505060206200012685828601620000d8565b9150509250929050565b60006200013d826200016c565b9050919050565b6000620001518262000130565b9050919050565b6000620001658262000130565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001978162000144565b8114620001a357600080fd5b50565b620001b18162000158565b8114620001bd57600080fd5b50565b61147d80620001d06000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063980d611611610066578063980d61161461016d578063a694fc3a1461019d578063af8c526c146101b9578063be22f546146101c3578063f80d72ed146101e15761009e565b80632e17de78146100a35780636e1dc66e146100bf5780636f49712b146100ef57806376636e5a1461011f578063782fc4ae1461013d575b600080fd5b6100bd60048036038101906100b89190610e6e565b610211565b005b6100d960048036038101906100d49190610e1c565b610596565b6040516100e691906110e3565b60405180910390f35b61010960048036038101906101049190610e1c565b6105ae565b6040516101169190611012565b60405180910390f35b6101276105ce565b6040516101349190611048565b60405180910390f35b61015760048036038101906101529190610e1c565b6105f4565b60405161016491906110e3565b60405180910390f35b61018760048036038101906101829190610e1c565b61060c565b60405161019491906110e3565b60405180910390f35b6101b760048036038101906101b29190610e6e565b61066b565b005b6101c1610a46565b005b6101cb610ce4565b6040516101d8919061102d565b60405180910390f35b6101fb60048036038101906101f69190610e1c565b610d0a565b60405161020891906110e3565b60405180910390f35b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156102af5750806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b6102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e5906110a3565b60405180910390fd5b60006102f933610d22565b9050600082905060009250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610361929190610fe9565b602060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b39190610e45565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461040291906111f0565b9250508190555081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610458919061110f565b9250508190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104ff576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8260405161058991906110e3565b60405180910390a2505050565b60016020528060005260406000206000915090505481565b60026020528060005260406000206000915054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b6000804290506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261065f91906111f0565b90508092505050919050565b600081116106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a590611063565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161070a9190610f97565b60206040518083038186803b15801561072257600080fd5b505afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a9190610e97565b101561079b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610792906110c3565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108525760006107f833610d22565b905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610849919061110f565b92505081905550505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016108b193929190610fb2565b602060405180830381600087803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610e45565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610952919061110f565b9250508190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051610a3b91906110e3565b60405180910390a250565b6000610a5133610d22565b90506000811180610aa157506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad790611083565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610bc0576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508082610bbc919061110f565b9150505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610c1d929190610fe9565b600060405180830381600087803b158015610c3757600080fd5b505af1158015610c4b573d6000803e3d6000fd5b5050505042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f92044e3943309ee5950e21bc7421d02c1df75f0df33c0d97c1143687b49a4c5782604051610cd991906110e3565b60405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600080670de0b6b3a7640000610d378461060c565b610d419190611196565b9050600062015180905060008183610d599190611165565b90506000670de0b6b3a7640000826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610db09190611196565b610dba9190611165565b905080945050505050919050565b600081359050610dd781611402565b92915050565b600081519050610dec81611419565b92915050565b600081359050610e0181611430565b92915050565b600081519050610e1681611430565b92915050565b600060208284031215610e2e57600080fd5b6000610e3c84828501610dc8565b91505092915050565b600060208284031215610e5757600080fd5b6000610e6584828501610ddd565b91505092915050565b600060208284031215610e8057600080fd5b6000610e8e84828501610df2565b91505092915050565b600060208284031215610ea957600080fd5b6000610eb784828501610e07565b91505092915050565b610ec981611224565b82525050565b610ed881611236565b82525050565b610ee78161126c565b82525050565b610ef681611290565b82525050565b6000610f09601b836110fe565b9150610f1482611312565b602082019050919050565b6000610f2c6022836110fe565b9150610f378261133b565b604082019050919050565b6000610f4f6011836110fe565b9150610f5a8261138a565b602082019050919050565b6000610f726036836110fe565b9150610f7d826113b3565b604082019050919050565b610f9181611262565b82525050565b6000602082019050610fac6000830184610ec0565b92915050565b6000606082019050610fc76000830186610ec0565b610fd46020830185610ec0565b610fe16040830184610f88565b949350505050565b6000604082019050610ffe6000830185610ec0565b61100b6020830184610f88565b9392505050565b60006020820190506110276000830184610ecf565b92915050565b60006020820190506110426000830184610ede565b92915050565b600060208201905061105d6000830184610eed565b92915050565b6000602082019050818103600083015261107c81610efc565b9050919050565b6000602082019050818103600083015261109c81610f1f565b9050919050565b600060208201905081810360008301526110bc81610f42565b9050919050565b600060208201905081810360008301526110dc81610f65565b9050919050565b60006020820190506110f86000830184610f88565b92915050565b600082825260208201905092915050565b600061111a82611262565b915061112583611262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561115a576111596112b4565b5b828201905092915050565b600061117082611262565b915061117b83611262565b92508261118b5761118a6112e3565b5b828204905092915050565b60006111a182611262565b91506111ac83611262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111e5576111e46112b4565b5b828202905092915050565b60006111fb82611262565b915061120683611262565b925082821015611219576112186112b4565b5b828203905092915050565b600061122f82611242565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112778261127e565b9050919050565b600061128982611242565b9050919050565b600061129b826112a2565b9050919050565b60006112ad82611242565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f596f752063616e6e6f74207374616b65207a65726f20746f6b656e0000000000600082015250565b7f596f752063616e27742077697468647261772066726f6d207a65726f20746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b7f596f752063616e277420756e7374616b65000000000000000000000000000000600082015250565b7f596f75722062616c616e6365206973206c65737320746861742074686520616d60008201527f6f756e7420796f752077616e7420746f207374616b6500000000000000000000602082015250565b61140b81611224565b811461141657600080fd5b50565b61142281611236565b811461142d57600080fd5b50565b61143981611262565b811461144457600080fd5b5056fea2646970667358221220dffb133629d3f61b5b897c1a392f8f154c31837982c662dace9ab90f33e0a06c64736f6c63430008040033";

type RealFarmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RealFarmConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RealFarm__factory extends ContractFactory {
  constructor(...args: RealFarmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RealFarm";
  }

  deploy(
    _daiToken: string,
    _realToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RealFarm> {
    return super.deploy(
      _daiToken,
      _realToken,
      overrides || {}
    ) as Promise<RealFarm>;
  }
  getDeployTransaction(
    _daiToken: string,
    _realToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_daiToken, _realToken, overrides || {});
  }
  attach(address: string): RealFarm {
    return super.attach(address) as RealFarm;
  }
  connect(signer: Signer): RealFarm__factory {
    return super.connect(signer) as RealFarm__factory;
  }
  static readonly contractName: "RealFarm";
  public readonly contractName: "RealFarm";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RealFarmInterface {
    return new utils.Interface(_abi) as RealFarmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RealFarm {
    return new Contract(address, _abi, signerOrProvider) as RealFarm;
  }
}
