/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RealFarmInterface extends utils.Interface {
  contractName: "RealFarm";
  functions: {
    "calculateYieldTime(address)": FunctionFragment;
    "daiToken()": FunctionFragment;
    "daiTokenBalance(address)": FunctionFragment;
    "isStaking(address)": FunctionFragment;
    "realToken()": FunctionFragment;
    "realTokenBalance(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "startTime(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "yieldWithdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateYieldTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "daiToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daiTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "realToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "realTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "startTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldWithdraw",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateYieldTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daiToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daiTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "realToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "YieldWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldWithdraw"): EventFragment;
}

export type StakeEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export type YieldWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type YieldWithdrawEventFilter = TypedEventFilter<YieldWithdrawEvent>;

export interface RealFarm extends BaseContract {
  contractName: "RealFarm";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RealFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateYieldTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daiToken(overrides?: CallOverrides): Promise<[string]>;

    daiTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    realToken(overrides?: CallOverrides): Promise<[string]>;

    realTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateYieldTime(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daiToken(overrides?: CallOverrides): Promise<string>;

  daiTokenBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isStaking(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  realToken(overrides?: CallOverrides): Promise<string>;

  realTokenBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateYieldTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiToken(overrides?: CallOverrides): Promise<string>;

    daiTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    realToken(overrides?: CallOverrides): Promise<string>;

    realTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    yieldWithdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Stake(address,uint256)"(
      from?: string | null,
      amount?: null
    ): StakeEventFilter;
    Stake(from?: string | null, amount?: null): StakeEventFilter;

    "Unstake(address,uint256)"(
      from?: string | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(from?: string | null, amount?: null): UnstakeEventFilter;

    "YieldWithdraw(address,uint256)"(
      to?: string | null,
      amount?: null
    ): YieldWithdrawEventFilter;
    YieldWithdraw(to?: string | null, amount?: null): YieldWithdrawEventFilter;
  };

  estimateGas: {
    calculateYieldTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiToken(overrides?: CallOverrides): Promise<BigNumber>;

    daiTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    realToken(overrides?: CallOverrides): Promise<BigNumber>;

    realTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateYieldTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStaking(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realTokenBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
